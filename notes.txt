Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology: 
    No Powerpoint presentation
    100% hands on driven
    At least 50% of the participants are expected to complete their assignments before we move on
    Be prepared to share you solution and explain your approach

Software: 
    golang.org 
    Visual Studio Code 

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Go (if any)

C
C++
Python
Ruby
Java
C#
Scala
Golang

- Better SDK
- Better concurrency support
- Memory management
- Better Garbage Collection
- Faster execution

For me:
    1. One of the simplest languages
        ONLY 25 keywords
        No support for classes (Only structs & functions)
        No support for inheritance (Only composition)
        NO access modifiers
        No exceptions (Only errors)
        No try catch block
        No generics (till 1.17)

    2. Shorter time for compilation

    3. Fast execution
        Compile to machine code
        On par with 'C' language
            Without the overheads
                Garbage collector
                No pointer arithmetic

    4. Concurrency Support
        Built in Scheduler
        Each goroutines takes only (4 KB) when compared to OS threads (2 MB)
        Concurrency support is built in the language itself
            go, select, range, chan (data type), <- (chan operator)

    

Paradox of Choice
    - Barry Schwartz

var t = new System.Threading.Thread();
t.Start()

func fn(){

}

go fn()

Data Types
===========
    bool
    string

    int8
    int16
    int32
    int64
    int

    uint8
    uint16
    uint32
    uint64
    uint

    float32
    float64

    complex64 (real (floa32) + imaginary (float32))
    complex128 (real (float64) + imaginary (float64))

    byte (uint8) (alias for uint8)
    rune (int32) (alias for int32) (represents a unicode code point (character))

Assignment:1
    Write a program that will print the prime numbers between 3 to 100

Assignment:2
    Write an interactive calculator
    Menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit

    If the userChoice is 1 to 4
        Get the two numbers from the user
        Perform the operation
        Print the result
        Display the menu again
    If the userChoice is 5
        Exit the program
    If the userChoice is not 1 to 5
        Display "Invalid choice"
        Display the menu again

Assignment:3
    Refactor the solution for Assignment:2 using functions

Functions
    1. A function can return more than one result
    2. Variadic functions
    3. Higher-order functions
        1. Assign functions to variables
        2. Pass functions as arguments
        3. Return functions from functions

Assignment:4
    Create increment(), decrement() functions that behaves as follows:

    increment() //=> 1
    increment() //=> 2
    increment() //=> 3
    increment() //=> 4

    decrement() //=> 3
    decrement() //=> 2
    decrement() //=> 1
    decrement() //=> 0
    decrement() //=> -1

    IMPORTANT NOTE: the outcome of increment() and decrement() functions should NOT BE able to be influenced from outside

Collections
    Array
        Fixed size
    Slice
        Dynamic size
        Pointer to an array
    Map
        key/value pairs collection

Assignment:5
    find which size word occurs the most and print the word size and the # of occurrances

Modules & Packages

Before 1.13
    GOPATH
        bin
        pkg
        src
            github.com
                tkmagesh
                    go-app
                        pkg1
                        pkg2
                            import "github.com/tkmagesh/go-app/pkg1"

To create a mod file
    go mod init modularity-demo

to install a 3rd party package
    go get github.com/fatih/color

to keep the go.mod file in sync
    go mod tidy

to localize the dependencies
    go mod vendor

Assignment:6
Create an Employee type with following attributes
    Id
    Name
    Basic
    HRA
    DA
    Tax
    CalculatorSalary()
    Format() //=> returns the attribute values formatted in a single string for display

Create an "FulltimeEmployee" Type
    Composing the Employee type
    Add a new attribute "Benefits"
    When the "FulltimeEmployee" is formatted for display include "Benefits" as well
    When salary is calculated, fulltime employee gets 20% bonus of an "Employee" (Salary of Employee + 20% more)

Modularize the code

Concurrency
    Assumption to be STRICTLY avoided
        1. Never assume the time taken for a function to complete
        2. Never assume the (default) sequence of execution of the concurrent operations (goroutines)

    Channel
        1. creating a channel
            var ch chan int = make(chan int)
            OR
            ch := make(chan int)

        2. Writing data (sending) into the channel
            ch <- 10

        3. Reading data (receiving) from the channel
            val := <- ch

        4. A channel read operation is always a blocking operation

        5. A channel write operation can succeed ONLY if a read operation is already initiated (not always). If the read is not initiated then the write operation will be blocked

IO
    io package
        reader
        writer
        closer
        seeker

    io/ioutil package
        read file contents
        write file contents

    bufio package
        buffered read write operations
        read file contents until a delimeter is encountered
        read line by line

    os package
        create a file
        copying a file
        deleting a file


Web
    standard library
        net/http
        encoding/json

    Routing libraries

GRPC

    .NET Remoting
        TCP / UDP
        binary serialization
        real time updates
    Java RMI

    REST services
        http
            stateless
            ONLY request & response
            data in text

    GRPC
        http2
        protocol bufferes (serialization standard)
        supported communication patterns
            request & response
            client streaming (multiple requests & one response)
            server streaming (one request & multiple responses)
            bidirectional streaming

    
P101,Pen,5,10,Stationary
P102,Pencil,2,100,Stationary

data = 53
xml = 245 (5 X data)
json = 165 (3 X data)

Steps for creating a service
    1. Create the proto (protocol bufferes) file with the service contract, operation contract & message contract
    2. Generate proxy & stub (using the protoc command)
    3. Build the servers using the stub & client using the proxy

tools for grpc
    Mac
        brew install protobuf
        brew install protoc-gen-go
        brew install protoc-gen-go-grpc

    window
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    protoc --version

to generate the proxy and the stub run the following command in the application folder
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto 


Code Coverage
    go test ./... --cover
    go test ./... -coverprofile=coverage.out
    go tool cover -html=coverage.out