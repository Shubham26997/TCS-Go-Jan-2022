Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology: 
    No Powerpoint presentation
    100% hands on driven
    At least 50% of the participants are expected to complete their assignments before we move on
    Be prepared to share you solution and explain your approach

Software: 
    golang.org 
    Visual Studio Code 

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Go (if any)

C
C++
Python
Ruby
Java
C#
Scala
Golang

- Better SDK
- Better concurrency support
- Memory management
- Better Garbage Collection
- Faster execution

For me:
    1. One of the simplest languages
        ONLY 25 keywords
        No support for classes (Only structs & functions)
        No support for inheritance (Only composition)
        NO access modifiers
        No exceptions (Only errors)
        No try catch block
        No generics (till 1.17)

    2. Shorter time for compilation

    3. Fast execution
        Compile to machine code
        On par with 'C' language
            Without the overheads
                Garbage collector
                No pointer arithmetic

    4. Concurrency Support
        Built in Scheduler
        Each goroutines takes only (4 KB) when compared to OS threads (2 MB)
        Concurrency support is built in the language itself
            go, select, range, chan (data type), <- (chan operator)

    

Paradox of Choice
    - Barry Schwartz

var t = new System.Threading.Thread();
t.Start()

func fn(){

}

go fn()

Data Types
===========
    bool
    string

    int8
    int16
    int32
    int64
    int

    uint8
    uint16
    uint32
    uint64
    uint

    float32
    float64

    complex64 (real (floa32) + imaginary (float32))
    complex128 (real (float64) + imaginary (float64))

    byte (uint8) (alias for uint8)
    rune (int32) (alias for int32) (represents a unicode code point (character))

Assignment:1
    Write a program that will print the prime numbers between 3 to 100

Assignment:2
    Write an interactive calculator
    Menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit

    If the userChoice is 1 to 4
        Get the two numbers from the user
        Perform the operation
        Print the result
        Display the menu again
    If the userChoice is 5
        Exit the program
    If the userChoice is not 1 to 5
        Display "Invalid choice"
        Display the menu again

Assignment:3
    Refactor the solution for Assignment:2 using functions

Functions
    1. A function can return more than one result
    2. Variadic functions